##################################################################################
#                                                                                #
#                                                                                #
#            ~ Voici l'interface graphique de notre bataille navale ~            #
#                                                                                #
#                                                                                #
##################################################################################

# les formules nécessaires au lancement de ma page graphique
import tkinter as tk  # Pour l'interface graphique
from tkinter import messagebox  # Pour les boîtes de dialogue
from tkinter import simpledialog  # Pour les entrées utilisateur

# Fonction pour vérifier si un joueur a perdu (tous ses bateaux coulés)
def verifier_victoire(tableau):
    """
    Vérifie si tous les bateaux d'un joueur sont coulés.

    Arguments:
        tableau (list): La grille de jeu du joueur.

    Retourne:
        True si tous les bateaux sont coulés, False sinon.
    """
    # Parcours chaque ligne du tableau
    for ligne in tableau:
        # Si on trouve un bateau ("B") encore présent
        if "B" in ligne:
            return False  # Le joueur a encore des bateaux
    return True  # Tous les bateaux sont coulés

# Fonction pour placer les bateaux au début du jeu
def placer_bateau(tableau, joueur):
    """
    Permet à un joueur de placer ses bateaux sur sa grille.

    Arguments:
        tableau (list): Grille de jeu du joueur
        joueur (int): Numéro du joueur (1 ou 2)
    """
    # Affiche les instructions au joueur
    messagebox.showinfo("Placement", f"Joueur {joueur}, placez vos bateaux.")
    
    # Demande le nombre de bateaux à placer (entre 1 et 10)
    nb_bateaux = simpledialog.askinteger("Nombre de bateaux", 
                                      "Nombre de bateaux (1-10):",
                                      minvalue=1, maxvalue=10)
    
    # Boucle pour placer chaque bateau
    for bateau in range(1, nb_bateaux + 1):
        while True:  # Boucle jusqu'à ce que le placement soit valide
            # Demande les infos pour le bateau
            reponse = simpledialog.askstring("Position", 
                                           f"Bateau {bateau}: ligne(0-9) colonne(0-9) orientation(h/v) taille")
            try:
                # Découpe la réponse en parties
                parts = reponse.split()
                # Vérifie qu'il y a bien 4 éléments
                if len(parts) != 4: 
                    raise ValueError
                
                # Récupère les valeurs
                ligne = int(parts[0])  # Ligne de départ
                colonne = int(parts[1])  # Colonne de départ
                orientation = parts[2].lower()  # Orientation (h ou v)
                taille = int(parts[3])  # Taille du bateau
                
                # Vérifie que les coordonnées sont valides
                if not (0 <= ligne <= 9) or not (0 <= colonne <= 9):
                    messagebox.showerror("Erreur", "Coordonnées invalides (0-9)")
                    continue
                    
                # Vérifie que l'orientation est valide
                if orientation not in ['h', 'v']:
                    messagebox.showerror("Erreur", "Orientation: 'h' ou 'v'")
                    continue
                    
                # Vérifie que la taille est valide
                if not (1 <= taille <= 10):
                    messagebox.showerror("Erreur", "Taille: 1-10")
                    continue
                    
                # Vérifie que le bateau ne dépasse pas de la grille
                cases_occupees = []
                for i in range(taille):
                    # Calcule les coordonnées selon l'orientation
                    x = ligne + (i if orientation == 'v' else 0)
                    y = colonne + (i if orientation == 'h' else 0)
                    
                    # Vérifie si on sort de la grille
                    if x > 9 or y > 9:
                        messagebox.showerror("Erreur", "Dépasse la grille!")
                        break
                        
                    # Vérifie si la case est déjà occupée
                    if tableau[x][y] == "B":
                        cases_occupees.append((x,y))
                
                # Si des cases sont occupées, affiche l'erreur
                if cases_occupees:
                    messagebox.showerror("Erreur", f"Cases occupées: {cases_occupees}")
                    continue
                    
                # Place le bateau sur la grille
                for i in range(taille):
                    x = ligne + (i if orientation == 'v' else 0)
                    y = colonne + (i if orientation == 'h' else 0)
                    tableau[x][y] = "B"  # "B" pour Bateau
                
                break  # Sort de la boucle while après placement réussi
                
            except (ValueError, AttributeError):
                # Gère les erreurs de saisie
                messagebox.showerror("Erreur", "Format: ligne col orientation taille")

# Fonction pour gérer un tir sur la grille
def tirer(i, j, tableau, bouton, joueur_actuel):
    """
    Gère le tir sur une case et met à jour l'interface.

    Arguments:
        i (int): Ligne de la case
        j (int): Colonne de la case
        tableau (list): Grille de jeu
        bouton (tk.Button): Bouton correspondant
        joueur_actuel (int): Joueur qui tire
    """
    # Si la case contient un bateau
    if tableau[i][j] == "B":
        # Met à jour l'interface (case rouge avec X)
        bouton.config(text="X", bg="red")
        tableau[i][j] = "X"  # Marque comme touché
        # Vérifie si c'est la fin du jeu
        if verifier_victoire(tableau):
            messagebox.showinfo("Fin", f"Joueur {joueur_actuel} gagne!")
            fenetre.quit()
    # Si la case est vide
    elif tableau[i][j] == "E":
        # Met à jour l'interface (case bleue avec O)
        bouton.config(text="O", bg="cornflowerblue")
        tableau[i][j] = "O"  # Marque comme tir dans l'eau
    else:  # Case déjà jouée
        messagebox.showinfo("Attention", "Case déjà tiré")

# Fonction pour changer de joueur après un tour
def changer_joueur():
    """Alterne entre les deux joueurs."""
    global joueur_actuel
    # Change de joueur (1 -> 2 ou 2 -> 1)
    joueur_actuel = 3 - joueur_actuel
    # Met à jour l'affichage du tour
    str_joueur.config(text=f"Tour du Joueur {joueur_actuel}")

# Fonction pour créer les callbacks des boutons
def creer_callback(i, j, tableau, bouton):
    """
    Crée une fonction de rappel pour un bouton.

    Arguments:
        i (int): Ligne de la case
        j (int): Colonne de la case
        tableau (list): Grille de jeu
        bouton (tk.Button): Bouton correspondant
    """
    def callback():
        """Fonction appelée lors du clic sur le bouton."""
        # Effectue le tir
        tirer(i, j, tableau, bouton, joueur_actuel)
        # Change de joueur
        changer_joueur()
    return callback

# Création de la fenêtre principale
fenetre = tk.Tk()
fenetre.title("Bataille Navale")

# Initialisation des grilles des joueurs
# "E" pour Eau (case vide), "B" pour Bateau
tableau_j1 = [["E"]*10 for _ in range(10)]  # Grille du joueur 1
tableau_j2 = [["E"]*10 for _ in range(10)]  # Grille du joueur 2

# Placement des bateaux au début du jeu
placer_bateau(tableau_j1, 1)  # Joueur 1 place ses bateaux
placer_bateau(tableau_j2, 2)  # Joueur 2 place ses bateaux

# Initialisation du joueur actuel (commence par le joueur 1)
joueur_actuel = 1

# Création de la grille de boutons (interface)
for i in range(10):  # Pour chaque ligne
    for j in range(10):  # Pour chaque colonne
        # Crée un bouton
        bouton = tk.Button(fenetre, text=" ", width=4, height=2)
        # Positionne le bouton dans la grille
        bouton.grid(row=i, column=j)
        # Configure l'action du bouton
        bouton.config(command=creer_callback(i, j, tableau_j1, bouton))

# Affichage du tour actuel
str_joueur = tk.Label(fenetre, text=f"Tour du Joueur {joueur_actuel}", font=("Arial", 14))
str_joueur.grid(row=10, column=0, columnspan=10)

# Lancement de la boucle principale de l'interface
fenetre.mainloop()
